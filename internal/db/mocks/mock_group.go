// Code generated by MockGen. DO NOT EDIT.
// Source: group.go
//
// Generated by this command:
//
//	mockgen -source=group.go -destination=mocks/mock_group.go -package=dbmocks
//

// Package dbmocks is a generated GoMock package.
package dbmocks

import (
	context "context"
	reflect "reflect"

	db "github.com/fair-n-square-co/transactions/internal/db"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockGroup is a mock of Group interface.
type MockGroup struct {
	ctrl     *gomock.Controller
	recorder *MockGroupMockRecorder
}

// MockGroupMockRecorder is the mock recorder for MockGroup.
type MockGroupMockRecorder struct {
	mock *MockGroup
}

// NewMockGroup creates a new mock instance.
func NewMockGroup(ctrl *gomock.Controller) *MockGroup {
	mock := &MockGroup{ctrl: ctrl}
	mock.recorder = &MockGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroup) EXPECT() *MockGroupMockRecorder {
	return m.recorder
}

// CreateGroup mocks base method.
func (m *MockGroup) CreateGroup(ctx context.Context, group db.CreateGroupOptions) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", ctx, group)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockGroupMockRecorder) CreateGroup(ctx, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockGroup)(nil).CreateGroup), ctx, group)
}

// ListGroups mocks base method.
func (m *MockGroup) ListGroups(ctx context.Context) (*db.GroupList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroups", ctx)
	ret0, _ := ret[0].(*db.GroupList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroups indicates an expected call of ListGroups.
func (mr *MockGroupMockRecorder) ListGroups(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockGroup)(nil).ListGroups), ctx)
}
